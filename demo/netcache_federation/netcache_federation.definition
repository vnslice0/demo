{"sliverTotalCnt":6,"vvLinkTotalCnt":7,"vportTotalCnt":0,"sliceName":"","nsList":[{"id":"ns0","name":"VN1:SP","blkList":[{"id":"ns0_bk0","name":"FromDevice","instanceName":"FromDevice0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","clickInfo":"FromDevice(eth2, PROMISC true)","blockDefId":"FromDevice-1.0","orientation":0,"definition":{"name":"FromDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"FromDevice(DEVNAME [, keywords PROMISC, BURST, TIMESTAMP...])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/FromDevice/undefined","blockDefId":"FromDevice-1.0","ports":[{"name":"out0","portIndex":0,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk0_po0","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":0,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":30,"cy":16,"id":"ns0_bk0_po1","multiplicity":"*","name":"vport0","path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk0_po0","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk0_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk1","name":"FromDevice","instanceName":"FromDevice1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","clickInfo":"FromDevice(eth1, PROMISC true)","blockDefId":"FromDevice-1.0","orientation":0,"definition":{"name":"FromDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"FromDevice(DEVNAME [, keywords PROMISC, BURST, TIMESTAMP...])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/FromDevice/undefined","blockDefId":"FromDevice-1.0","ports":[{"name":"out0","portIndex":0,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk1_po0","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":0,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":30,"cy":16,"id":"ns0_bk1_po1","multiplicity":"*","name":"vport0","path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk1_po0","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk1_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk2","name":"ToDevice","instanceName":"ToDevice0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","clickInfo":"ToDevice(eth2)","blockDefId":"ToDevice-1.0","orientation":0,"definition":{"name":"ToDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"ToDevice(DEVNAME [, BURST, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/ToDevice/undefined","blockDefId":"ToDevice-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"pull","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk2_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"pull","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk2_po1","multiplicity":"*","name":"vport0","path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk2_po0","name":"in0","role":"input","processing":"pull","multiplicity":"*"},{"enable":true,"id":"ns0_bk2_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk4","name":"Queue","instanceName":"Queue0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk4_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk4_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk4_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk4_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk4_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk4_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk5","name":"Queue","instanceName":"Queue1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk5_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk5_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk5_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk5_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk5_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk5_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk6","name":"Classifier","instanceName":"Classifier0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Classification_and_Selection","description":"Classifies packets. The Classifier has N outputs, each associated with the\r\ncorresponding pattern from the configuration string.\r\nA pattern is a set of clauses, where each clause is either \"offset/value\"\r\nor \"offset/value%mask\". A pattern matches if the packet has the indicated\r\nvalue at each offset.\r\nThe clauses in each pattern are separated\r\nby spaces. A clause consists of the offset, \"/\", the value, and (optionally)\r\n\"%\" and a mask. The offset is in decimal. The value and mask are in hex.\r\nThe length of the value is implied by the number of hex digits, which must\r\nbe even. \"?\" is also allowed as a \"hex digit\"; it means \"don't care about\r\nthe value of this nibble\".\r\nIf present, the mask must have the same number of hex digits as the value.\r\nThe matcher will only check bits that are 1 in the mask.\r\nA clause may be preceded by \"!\", in which case the clause must NOT match\r\nthe packet.\r\nAs a special case, a pattern consisting of \"-\" matches every packet.\r\nThe patterns are scanned in order, and the packet is sent to the output\r\ncorresponding to the first matching pattern. Thus more specific patterns\r\nshould come before less specific ones. You will get a warning if no packet\r\ncould ever match a pattern. Usually, this is because an earlier pattern is\r\nmore general, or because your pattern is contradictory (`12/0806 12/0800').\r\n","clickInfo":"Classifier(12/0800, -)","blockDefId":"Classifier-1.0","orientation":0,"definition":{"name":"Classifier","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Classification_and_Selection","description":"Classifies packets. The Classifier has N outputs, each associated with the\r\ncorresponding pattern from the configuration string.\r\nA pattern is a set of clauses, where each clause is either \"offset/value\"\r\nor \"offset/value%mask\". A pattern matches if the packet has the indicated\r\nvalue at each offset.\r\nThe clauses in each pattern are separated\r\nby spaces. A clause consists of the offset, \"/\", the value, and (optionally)\r\n\"%\" and a mask. The offset is in decimal. The value and mask are in hex.\r\nThe length of the value is implied by the number of hex digits, which must\r\nbe even. \"?\" is also allowed as a \"hex digit\"; it means \"don't care about\r\nthe value of this nibble\".\r\nIf present, the mask must have the same number of hex digits as the value.\r\nThe matcher will only check bits that are 1 in the mask.\r\nA clause may be preceded by \"!\", in which case the clause must NOT match\r\nthe packet.\r\nAs a special case, a pattern consisting of \"-\" matches every packet.\r\nThe patterns are scanned in order, and the packet is sent to the output\r\ncorresponding to the first matching pattern. Thus more specific patterns\r\nshould come before less specific ones. You will get a warning if no packet\r\ncould ever match a pattern. Usually, this is because an earlier pattern is\r\nmore general, or because your pattern is contradictory (`12/0806 12/0800').\r\n","bgColor":"undefined","clickInfo":"Classifier(pattern1, ..., patternN)","elementclassText":"","width":60,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Classification_and_Selection/Classifier/undefined","blockDefId":"Classifier-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 28 0 L 32 0 L 30 4 z","cx":30,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 4 14 L 8 14 L 8 18 L 4 18 z","cx":6,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 16 14 L 20 14 L 20 18 L 16 18 z","cx":18,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out3","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 40 14 L 44 14 L 44 18 L 40 18 z","cx":42,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out4","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 52 14 L 56 14 L 56 18 L 52 18 z","cx":54,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":30,"cy":2,"id":"ns0_bk6_po0","multiplicity":"*","name":"in0","path":"M 28 0 L 32 0 L 30 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6,"cy":16,"id":"ns0_bk6_po1","multiplicity":"*","name":"out0","path":"M 4 14 L 8 14 L 8 18 L 4 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":18,"cy":16,"id":"ns0_bk6_po2","multiplicity":"*","name":"out1","path":"M 16 14 L 20 14 L 20 18 L 16 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk6_po3","multiplicity":"*","name":"out2","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":42,"cy":16,"id":"ns0_bk6_po4","multiplicity":"*","name":"out3","path":"M 40 14 L 44 14 L 44 18 L 40 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":54,"cy":16,"id":"ns0_bk6_po5","multiplicity":"*","name":"out4","path":"M 52 14 L 56 14 L 56 18 L 52 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk6_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po3","name":"out2","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po4","name":"out3","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po5","name":"out4","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk7","name":"Align","instanceName":"Align0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Aligns packet data. Each input packet is aligned so that its first byte is\r\nOFFSET bytes off from a MODULUS-byte boundary. This may involve a packet\r\ncopy.\r\nMODULUS must be 2, 4, or 8.\r\n","clickInfo":"Align(4, 0)","blockDefId":"Align-1.0","orientation":0,"definition":{"name":"Align","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Aligns packet data. Each input packet is aligned so that its first byte is\r\nOFFSET bytes off from a MODULUS-byte boundary. This may involve a packet\r\ncopy.\r\nMODULUS must be 2, 4, or 8.\r\n","bgColor":"undefined","clickInfo":"Align(MODULUS, OFFSET)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Align/undefined","blockDefId":"Align-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk7_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk7_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk7_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk7_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk8","name":"Strip","instanceName":"Strip0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Deletes the first LENGTH bytes from each packet.\r\n","clickInfo":"Strip(14)","blockDefId":"Strip-1.0","orientation":0,"definition":{"name":"Strip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Deletes the first LENGTH bytes from each packet.\r\n","bgColor":"undefined","clickInfo":"Strip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Strip/undefined","blockDefId":"Strip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk8_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk8_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk8_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk8_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk9","name":"Unstrip","instanceName":"Unstrip0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","clickInfo":"Unstrip(14)","blockDefId":"Unstrip-1.0","orientation":0,"definition":{"name":"Unstrip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","bgColor":"undefined","clickInfo":"Unstrip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Unstrip/undefined","blockDefId":"Unstrip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk9_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk9_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk9_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk9_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk10","name":"Unstrip","instanceName":"Unstrip1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","clickInfo":"Unstrip(14)","blockDefId":"Unstrip-1.0","orientation":0,"definition":{"name":"Unstrip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","bgColor":"undefined","clickInfo":"Unstrip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Unstrip/undefined","blockDefId":"Unstrip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk10_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk10_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk10_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk10_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk11","name":"Discard","instanceName":"Discard0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Sources_and_Sinks","description":"Discards all packets received on its single input. If used in a pull context,\r\nit initiates pulls whenever packets are available, and listens for activity\r\nnotification, such as that available from Queue.\r\nKeyword arguments are:\r\n\r\n\r\n ACTIVE\r\n Boolean. If false, then Discard does not pull packets. Default is true.\r\nOnly meaningful in pull context.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned. Number of packets to pull per scheduling. Default is 1. Only\r\nmeaningful in pull context.\r\n\r\n\r\n","clickInfo":"Discard()","blockDefId":"Discard-1.0","orientation":0,"definition":{"name":"Discard","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Sources_and_Sinks","description":"Discards all packets received on its single input. If used in a pull context,\r\nit initiates pulls whenever packets are available, and listens for activity\r\nnotification, such as that available from Queue.\r\nKeyword arguments are:\r\n\r\n\r\n ACTIVE\r\n Boolean. If false, then Discard does not pull packets. Default is true.\r\nOnly meaningful in pull context.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned. Number of packets to pull per scheduling. Default is 1. Only\r\nmeaningful in pull context.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"Discard([keywords ACTIVE, BURST])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Sources_and_Sinks/Discard/undefined","blockDefId":"Discard-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk11_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk11_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk12","name":"EtherSwitch","instanceName":"EtherSwitch0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Ethernet","description":"Expects and produces Ethernet packets.  Each pair of corresponding ports\r\n(e.g., input 0 and output 0, and input 1 and output 1, and so forth)\r\ncorresponds to a LAN.  Acts as a learning, forwarding Ethernet switch among\r\nthose LANs.\r\nOn receiving a packet on input port I with source address A, EtherSwitch\r\nassociates A with I.  Future packets destined for A are sent to output I\r\n(unless they came from input I, in which case they are dropped).  Packets sent\r\nto an unknown destination address are forwarded to every output port, except\r\nthe one corresponding to the packet's input port.  The TIMEOUT parameter\r\naffects how long port associations last.  If it is 0, then the element does\r\nnot learn addresses, and acts like a dumb hub.\r\nKeyword arguments are:\r\n\r\n\r\n TIMEOUT\r\n The timeout for port associations, in seconds.  Any port mapping (i.e.,\r\nbinding between an address and a port number) is dropped after TIMEOUT seconds\r\nof inactivity.  If 0, the element acts like a dumb hub.  Default is 300.\r\n\r\n\r\n","clickInfo":"EtherSwitch()","blockDefId":"EtherSwitch-1.0","orientation":0,"definition":{"name":"EtherSwitch","type":"click-user","ver":"1.0","maxInstance":"*","category":"Ethernet","description":"Expects and produces Ethernet packets.  Each pair of corresponding ports\r\n(e.g., input 0 and output 0, and input 1 and output 1, and so forth)\r\ncorresponds to a LAN.  Acts as a learning, forwarding Ethernet switch among\r\nthose LANs.\r\nOn receiving a packet on input port I with source address A, EtherSwitch\r\nassociates A with I.  Future packets destined for A are sent to output I\r\n(unless they came from input I, in which case they are dropped).  Packets sent\r\nto an unknown destination address are forwarded to every output port, except\r\nthe one corresponding to the packet's input port.  The TIMEOUT parameter\r\naffects how long port associations last.  If it is 0, then the element does\r\nnot learn addresses, and acts like a dumb hub.\r\nKeyword arguments are:\r\n\r\n\r\n TIMEOUT\r\n The timeout for port associations, in seconds.  Any port mapping (i.e.,\r\nbinding between an address and a port number) is dropped after TIMEOUT seconds\r\nof inactivity.  If 0, the element acts like a dumb hub.  Default is 300.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"EtherSwitch([keywords TIMEOUT])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Ethernet/EtherSwitch/undefined","blockDefId":"EtherSwitch-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","cx":6.666666666666667,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"in1","portIndex":1,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"in2","portIndex":2,"role":"input","processing":"push","val":null,"path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","cx":33.333333333333336,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","cx":6.666666666666667,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","cx":33.333333333333336,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":3,"cx":6.666666666666667,"cy":2,"id":"ns0_bk12_po0","multiplicity":"*","name":"in0","path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk12_po1","multiplicity":"*","name":"in1","path":"M 18 0 L 22 0 L 20 4 z","portIndex":1,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":2,"id":"ns0_bk12_po2","multiplicity":"*","name":"in2","path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","portIndex":2,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6.666666666666667,"cy":16,"id":"ns0_bk12_po3","multiplicity":"*","name":"out0","path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk12_po4","multiplicity":"*","name":"out1","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":16,"id":"ns0_bk12_po5","multiplicity":"*","name":"out2","path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk12_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po1","name":"in1","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po2","name":"in2","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po3","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po4","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po5","name":"out2","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk13","name":"FromSocket","instanceName":"FromSocket0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads data from the specified socket. Packets received from the remote\r\nhost or process are emitted on the output.\r\nThis element exists only for backward compatibility. See the more\r\ngeneral Socket implementation for details, and for supported keyword\r\narguments. A FromSocket is equivalent to a Socket with the CLIENT\r\nkeyword set to FALSE or a Socket with no inputs.\r\n","clickInfo":"FromSocket(Udp, 0.0.0.0, 50000)","blockDefId":"FromSocket-1.0","orientation":0,"definition":{"name":"FromSocket","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads data from the specified socket. Packets received from the remote\r\nhost or process are emitted on the output.\r\nThis element exists only for backward compatibility. See the more\r\ngeneral Socket implementation for details, and for supported keyword\r\narguments. A FromSocket is equivalent to a Socket with the CLIENT\r\nkeyword set to FALSE or a Socket with no inputs.\r\n","bgColor":"undefined","clickInfo":"FromSocket(\"TCP\", IP, PORTNUMBER [, KEYWORDS])FromSocket(\"UDP\", IP, PORTNUMBER [, KEYWORDS])FromSocket(\"UNIX\", FILENAME [, KEYWORDS])FromSocket(\"UNIX_DGRAM\", FILENAME [, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/FromSocket/undefined","blockDefId":"FromSocket-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":0,"cx":20,"cy":2,"id":"ns0_bk13_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk13_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk13_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk13_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk14","name":"FromSocket","instanceName":"FromSocket1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads data from the specified socket. Packets received from the remote\r\nhost or process are emitted on the output.\r\nThis element exists only for backward compatibility. See the more\r\ngeneral Socket implementation for details, and for supported keyword\r\narguments. A FromSocket is equivalent to a Socket with the CLIENT\r\nkeyword set to FALSE or a Socket with no inputs.\r\n","clickInfo":"FromSocket(Udp, 0.0.0.0, 50001)","blockDefId":"FromSocket-1.0","orientation":0,"definition":{"name":"FromSocket","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads data from the specified socket. Packets received from the remote\r\nhost or process are emitted on the output.\r\nThis element exists only for backward compatibility. See the more\r\ngeneral Socket implementation for details, and for supported keyword\r\narguments. A FromSocket is equivalent to a Socket with the CLIENT\r\nkeyword set to FALSE or a Socket with no inputs.\r\n","bgColor":"undefined","clickInfo":"FromSocket(\"TCP\", IP, PORTNUMBER [, KEYWORDS])FromSocket(\"UDP\", IP, PORTNUMBER [, KEYWORDS])FromSocket(\"UNIX\", FILENAME [, KEYWORDS])FromSocket(\"UNIX_DGRAM\", FILENAME [, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/FromSocket/undefined","blockDefId":"FromSocket-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":0,"cx":20,"cy":2,"id":"ns0_bk14_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk14_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk14_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk14_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk15","name":"KernelTap","instanceName":"KernelTap0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads Ethernet packets from and writes Ethernet packets to a /dev/tun* or\r\n/dev/tap* device.  This allows a user-level Click to hand packets to the\r\nvirtual Ethernet device.  KernelTap will also transfer packets from the\r\nvirtual Ethernet device.\r\nKernelTap allocates a /dev/tun* or tap* device (this might fail) and runs\r\nifconfig to set the interface's local (i.e., kernel) address to ADDR and\r\nthe netmask to MASK.  If a nonzero GATEWAY IP address (which must be on the\r\nsame network as the tun) is specified, then KernelTap tries to set up a\r\ndefault route through that host.\r\nKeyword arguments are:\r\n\r\n\r\n ETHER\r\n Ethernet address. Specifies the fake device's Ethernet address. Default is\r\n00:01:02:03:04:05. On Linux, you must supply an ETHER argument, and use that\r\naddress as the destination Ethernet address for all packets sent to the tap\r\nelement; otherwise, Linux will ignore your packets. On FreeBSD, there is no\r\nway to set the Ethernet address, and any ETHER argument is silently ignored,\r\nbut it is safe to use any destination Ethernet address for packets sent to the\r\ntap.\r\n\r\n\r\n\r\n\r\n MTU\r\n Integer.  The interface's maximum transmission unit, not including the\r\nEthernet header.  Default is 1500; some operating systems do not allow it to\r\nbe set.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer.  The number of bytes left empty before the packet data (to leave room\r\nfor additional encapsulation headers).  Default is 0.\r\n\r\n\r\n\r\n\r\n IGNORE_QUEUE_OVERFLOWS\r\n Boolean.  If true, don't print more than one error message when there are\r\nqueue overflow errors (ENOBUFS) when sending or receiving packets via the tun\r\ndevice.  Default is false.\r\nKernelTap accepts the same arguments as KernelTun.\r\n\r\n\r\n","clickInfo":"KernelTap(10.1.1.1/24, ETHER 12:0d:4e:d0:77:85)","blockDefId":"KernelTap-1.0","orientation":0,"definition":{"name":"KernelTap","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads Ethernet packets from and writes Ethernet packets to a /dev/tun* or\r\n/dev/tap* device.  This allows a user-level Click to hand packets to the\r\nvirtual Ethernet device.  KernelTap will also transfer packets from the\r\nvirtual Ethernet device.\r\nKernelTap allocates a /dev/tun* or tap* device (this might fail) and runs\r\nifconfig to set the interface's local (i.e., kernel) address to ADDR and\r\nthe netmask to MASK.  If a nonzero GATEWAY IP address (which must be on the\r\nsame network as the tun) is specified, then KernelTap tries to set up a\r\ndefault route through that host.\r\nKeyword arguments are:\r\n\r\n\r\n ETHER\r\n Ethernet address. Specifies the fake device's Ethernet address. Default is\r\n00:01:02:03:04:05. On Linux, you must supply an ETHER argument, and use that\r\naddress as the destination Ethernet address for all packets sent to the tap\r\nelement; otherwise, Linux will ignore your packets. On FreeBSD, there is no\r\nway to set the Ethernet address, and any ETHER argument is silently ignored,\r\nbut it is safe to use any destination Ethernet address for packets sent to the\r\ntap.\r\n\r\n\r\n\r\n\r\n MTU\r\n Integer.  The interface's maximum transmission unit, not including the\r\nEthernet header.  Default is 1500; some operating systems do not allow it to\r\nbe set.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer.  The number of bytes left empty before the packet data (to leave room\r\nfor additional encapsulation headers).  Default is 0.\r\n\r\n\r\n\r\n\r\n IGNORE_QUEUE_OVERFLOWS\r\n Boolean.  If true, don't print more than one error message when there are\r\nqueue overflow errors (ENOBUFS) when sending or receiving packets via the tun\r\ndevice.  Default is false.\r\nKernelTap accepts the same arguments as KernelTun.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"KernelTap(ADDR/MASK [, GATEWAY, keywords ETHER, MTU, HEADROOM, IGNORE_QUEUE_OVERFLOWS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/KernelTap/undefined","blockDefId":"KernelTap-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk15_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk15_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk15_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk15_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk15_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk15_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk16","name":"CheckIPHeader2","instanceName":"CheckIPHeader0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"This element behaves exactly like CheckIPHeader, except that it does not by\r\ndefault check packets' IP checksums.\r\n","clickInfo":"CheckIPHeader()","blockDefId":"CheckIPHeader2-1.0","orientation":0,"definition":{"name":"CheckIPHeader2","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"This element behaves exactly like CheckIPHeader, except that it does not by\r\ndefault check packets' IP checksums.\r\n","bgColor":"undefined","clickInfo":"CheckIPHeader2([OFFSET, keywords])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/CheckIPHeader2/undefined","blockDefId":"CheckIPHeader2-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk16_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk16_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk16_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk16_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk16_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk16_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk17","name":"IPClassifier","instanceName":"IPClassifier0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","clickInfo":"IPClassifier(tcp, -)","blockDefId":"IPClassifier-1.0","orientation":0,"definition":{"name":"IPClassifier","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"IPClassifier(PATTERN_1, ..., PATTERN_N)","elementclassText":"","width":60,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/IPClassifier/undefined","blockDefId":"IPClassifier-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 28 0 L 32 0 L 30 4 z","cx":30,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 4 14 L 8 14 L 8 18 L 4 18 z","cx":6,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 16 14 L 20 14 L 20 18 L 16 18 z","cx":18,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out3","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 40 14 L 44 14 L 44 18 L 40 18 z","cx":42,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out4","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 52 14 L 56 14 L 56 18 L 52 18 z","cx":54,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":30,"cy":2,"id":"ns0_bk17_po0","multiplicity":"*","name":"in0","path":"M 28 0 L 32 0 L 30 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6,"cy":16,"id":"ns0_bk17_po1","multiplicity":"*","name":"out0","path":"M 4 14 L 8 14 L 8 18 L 4 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":18,"cy":16,"id":"ns0_bk17_po2","multiplicity":"*","name":"out1","path":"M 16 14 L 20 14 L 20 18 L 16 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk17_po3","multiplicity":"*","name":"out2","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":42,"cy":16,"id":"ns0_bk17_po4","multiplicity":"*","name":"out3","path":"M 40 14 L 44 14 L 44 18 L 40 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":54,"cy":16,"id":"ns0_bk17_po5","multiplicity":"*","name":"out4","path":"M 52 14 L 56 14 L 56 18 L 52 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk17_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po3","name":"out2","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po4","name":"out3","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po5","name":"out4","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk18","name":"IPClassifier","instanceName":"IPClassifier1","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","clickInfo":"IPClassifier(dst port 50000 or 50001, -)","blockDefId":"IPClassifier-1.0","orientation":0,"definition":{"name":"IPClassifier","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"IPClassifier(PATTERN_1, ..., PATTERN_N)","elementclassText":"","width":60,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/IPClassifier/undefined","blockDefId":"IPClassifier-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 28 0 L 32 0 L 30 4 z","cx":30,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 4 14 L 8 14 L 8 18 L 4 18 z","cx":6,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 16 14 L 20 14 L 20 18 L 16 18 z","cx":18,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out3","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 40 14 L 44 14 L 44 18 L 40 18 z","cx":42,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out4","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 52 14 L 56 14 L 56 18 L 52 18 z","cx":54,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":30,"cy":2,"id":"ns0_bk18_po0","multiplicity":"*","name":"in0","path":"M 28 0 L 32 0 L 30 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6,"cy":16,"id":"ns0_bk18_po1","multiplicity":"*","name":"out0","path":"M 4 14 L 8 14 L 8 18 L 4 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":18,"cy":16,"id":"ns0_bk18_po2","multiplicity":"*","name":"out1","path":"M 16 14 L 20 14 L 20 18 L 16 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk18_po3","multiplicity":"*","name":"out2","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":42,"cy":16,"id":"ns0_bk18_po4","multiplicity":"*","name":"out3","path":"M 40 14 L 44 14 L 44 18 L 40 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":54,"cy":16,"id":"ns0_bk18_po5","multiplicity":"*","name":"out4","path":"M 52 14 L 56 14 L 56 18 L 52 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk18_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk18_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk18_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk18_po3","name":"out2","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk18_po4","name":"out3","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk18_po5","name":"out4","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk19","name":"Queue","instanceName":"Queue2","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk19_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns0_bk19_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns0_bk19_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk19_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk19_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk19_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk20","name":"NetCacheElement","instanceName":"NetCacheElement0","type":"click-user","ver":"1.0","maxInstance":"*","category":"smpclick","description":"","clickInfo":"NetCacheElement(INGRESS)","blockDefId":"NetCacheElement-1.0","orientation":0,"definition":{"name":"NetCacheElement","type":"click-user","ver":"1.0","maxInstance":"*","category":"smpclick","description":"","bgColor":"rgb(255, 255, 255)","clickInfo":"NetCacheElement()","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/smpclick/NetCacheElement/undefined","blockDefId":"NetCacheElement-1.0","ports":[{"name":"input","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","cx":6.666666666666667,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"socketin1","portIndex":1,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"socketin2","portIndex":2,"role":"input","processing":"push","val":null,"path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","cx":33.333333333333336,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"output","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","cx":6.666666666666667,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"socketout1","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"socketout2","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","cx":33.333333333333336,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":6.666666666666667,"cy":2,"id":"ns0_bk20_po0","multiplicity":"*","name":"input","path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk20_po1","multiplicity":"*","name":"socketin1","path":"M 18 0 L 22 0 L 20 4 z","portIndex":1,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":2,"id":"ns0_bk20_po2","multiplicity":"*","name":"socketin2","path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","portIndex":2,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6.666666666666667,"cy":16,"id":"ns0_bk20_po3","multiplicity":"*","name":"output","path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":20,"cy":16,"id":"ns0_bk20_po4","multiplicity":"*","name":"socketout1","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":33.333333333333336,"cy":16,"id":"ns0_bk20_po5","multiplicity":"*","name":"socketout2","path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk20_po0","name":"input","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk20_po1","name":"socketin1","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk20_po2","name":"socketin2","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk20_po3","name":"output","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk20_po4","name":"socketout1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk20_po5","name":"socketout2","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns0_bk21","name":"SetIPChecksum","instanceName":"SetIPChecksum0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Expects an IP packet as input.\r\nCalculates the IP header's checksum and sets the checksum header field.\r\nYou will not normally need SetIPChecksum. Most elements that modify an IP\r\nheader, like DecIPTTL, SetIPDSCP, and IPRewriter, already update the\r\nchecksum incrementally.\r\n","clickInfo":"SetIPChecksum()","blockDefId":"SetIPChecksum-1.0","orientation":0,"definition":{"name":"SetIPChecksum","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Expects an IP packet as input.\r\nCalculates the IP header's checksum and sets the checksum header field.\r\nYou will not normally need SetIPChecksum. Most elements that modify an IP\r\nheader, like DecIPTTL, SetIPDSCP, and IPRewriter, already update the\r\nchecksum incrementally.\r\n","bgColor":"undefined","clickInfo":"SetIPChecksum()","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/SetIPChecksum/undefined","blockDefId":"SetIPChecksum-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk21_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk21_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk21_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk21_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns0_bk22","name":"ToDevice","instanceName":"ToDevice1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","clickInfo":"ToDevice(eth1)","blockDefId":"ToDevice-1.0","orientation":0,"definition":{"name":"ToDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"ToDevice(DEVNAME [, BURST, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/ToDevice/undefined","blockDefId":"ToDevice-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"pull","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns0_bk22_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"pull","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns0_bk22_po1","multiplicity":"*","name":"vport0","path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk22_po0","name":"in0","role":"input","processing":"pull","multiplicity":"*"},{"enable":true,"id":"ns0_bk22_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]}],"blkTotalCnt":23,"vpoList":[{"id":"ns0_vp0","name":"eth1","ports":[{"connCount":2,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"left","role":"nsvport"}],"mac":"12:0d:4e:d0:77:85"},{"id":"ns0_vp1","name":"eth2","ports":[{"connCount":2,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"right","role":"nsvport"}],"mac":"12:31:36:bf:5c:9c"},{"id":"ns0_vp2","name":"eth3","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"right","role":"nsvport"}],"mac":"12:24:88:ca:77:07"}],"vpoTotalCnt":4,"lnkList":[{"id":"ns0_link0","sourceId":"ns0_bk0","targetId":"ns0_bk6","left":false,"right":true,"srcPortIdx":0,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link1","sourceId":"ns0_bk6","targetId":"ns0_bk8","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link2","sourceId":"ns0_bk8","targetId":"ns0_bk7","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link3","sourceId":"ns0_bk7","targetId":"ns0_bk16","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link4","sourceId":"ns0_bk16","targetId":"ns0_bk17","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link5","sourceId":"ns0_bk17","targetId":"ns0_bk20","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link6","sourceId":"ns0_bk20","targetId":"ns0_bk18","left":false,"right":true,"srcPortIdx":3,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link7","sourceId":"ns0_bk18","targetId":"ns0_bk11","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link8","sourceId":"ns0_bk18","targetId":"ns0_bk21","left":false,"right":true,"srcPortIdx":2,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link9","sourceId":"ns0_bk13","targetId":"ns0_bk20","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":1,"className":"link bblink"},{"id":"ns0_link10","sourceId":"ns0_bk14","targetId":"ns0_bk20","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":2,"className":"link bblink"},{"id":"ns0_link11","sourceId":"ns0_bk1","targetId":"ns0_bk12","left":false,"right":true,"srcPortIdx":0,"dstPortIdx":1,"className":"link bblink"},{"id":"ns0_link12","sourceId":"ns0_bk6","targetId":"ns0_bk12","left":false,"right":true,"srcPortIdx":2,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link13","sourceId":"ns0_bk17","targetId":"ns0_bk9","left":false,"right":true,"srcPortIdx":2,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link14","sourceId":"ns0_bk9","targetId":"ns0_bk12","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link15","sourceId":"ns0_bk15","targetId":"ns0_bk12","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":2,"className":"link bblink"},{"id":"ns0_link16","sourceId":"ns0_bk12","targetId":"ns0_bk4","left":false,"right":true,"srcPortIdx":3,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link17","sourceId":"ns0_bk4","targetId":"ns0_bk2","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link18","sourceId":"ns0_bk12","targetId":"ns0_bk5","left":false,"right":true,"srcPortIdx":4,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link20","sourceId":"ns0_bk12","targetId":"ns0_bk19","left":false,"right":true,"srcPortIdx":5,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link21","sourceId":"ns0_bk19","targetId":"ns0_bk15","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link22","sourceId":"ns0_bk21","targetId":"ns0_bk10","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link23","sourceId":"ns0_bk10","targetId":"ns0_bk12","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link26","sourceId":"ns0_bk5","targetId":"ns0_bk22","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns0_link29","sourceId":"ns0_bk0","targetId":"ns0_vp1","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns0_link30","sourceId":"ns0_bk1","targetId":"ns0_vp0","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns0_link31","sourceId":"ns0_bk2","targetId":"ns0_vp1","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns0_link32","sourceId":"ns0_bk22","targetId":"ns0_vp0","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"}],"lnkTotalCnt":33,"sliceName":"","hostname":""},{"id":"ns1","name":"VN2:SP","blkList":[],"blkTotalCnt":0,"vpoList":[{"id":"ns1_vp0","name":"eth1","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"left","role":"nsvport"}],"mac":"12:25:22:d0:77:85"},{"id":"ns1_vp1","name":"eth2","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"top","role":"nsvport"}],"mac":"12:bb:33:bf:5c:9c"}],"vpoTotalCnt":2,"lnkList":[],"lnkTotalCnt":0,"sliceName":"","hostname":""},{"id":"ns2","name":"VN3:SP","blkList":[],"blkTotalCnt":0,"vpoList":[{"id":"ns2_vp0","name":"eth1","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"bottom","role":"nsvport"}],"mac":"12:3b:ab:d0:77:85"},{"id":"ns2_vp1","name":"eth2","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"left","role":"nsvport"}],"mac":"12:dc:13:bf:5c:9c"}],"vpoTotalCnt":2,"lnkList":[],"lnkTotalCnt":0,"sliceName":"","hostname":""},{"id":"ns3","name":"PG:NS:PN1","blkList":[{"id":"ns3_bk0","name":"FromDevice","instanceName":"FromDevice0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","clickInfo":"FromDevice(vlan327, PROMISC true)","blockDefId":"FromDevice-1.0","orientation":0,"definition":{"name":"FromDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"FromDevice(DEVNAME [, keywords PROMISC, BURST, TIMESTAMP...])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/FromDevice/undefined","blockDefId":"FromDevice-1.0","ports":[{"name":"out0","portIndex":0,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk0_po0","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":0,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":30,"cy":16,"id":"ns3_bk0_po1","multiplicity":"*","name":"vport0","path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk0_po0","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk0_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk1","name":"FromDevice","instanceName":"FromDevice1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","clickInfo":"FromDevice(vlan309, PROMISC true)","blockDefId":"FromDevice-1.0","orientation":0,"definition":{"name":"FromDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the FromDevice\r\nelement. For the user-level element, read the FromDevice.u manual page.\r\nIntercepts all packets received by the Linux network interface named DEVNAME\r\nand pushes them out output 0.  The packets include the link-level header.\r\nDEVNAME may also be an Ethernet address, in which case FromDevice searches for\r\na device with that address.\r\nFromDevice receives packets at interrupt time and stores them in an internal\r\nqueue.  Later, in the Click kernel thread -- that is, not at interrupt time --\r\na FromDevice task emits packets from that queue into the configuration.  It\r\nemits at most BURST packets per task execution; BURST is 8 by default.\r\nKeyword arguments are:\r\n\r\n\r\n PROMISC\r\n Boolean.  If true, the device is put into promiscuous mode while FromDevice is\r\nactive.  Default is false.\r\n\r\n\r\n\r\n\r\n BURST\r\n Unsigned integer.  Sets the BURST parameter.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean.  If true, then ensure that received packets have correctly-set\r\ntimestamp annotations.  Default is true.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then FromDevice will report a warning (rather than\r\nan error). Later, while the router is running, if a device named DEVNAME\r\nappears, FromDevice will seamlessly begin outputing its packets. Default is\r\nfalse.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n\r\n\r\n ACTIVE\r\n Boolean.  If false, then FromDevice will not accept packets from the attached\r\ndevice; instead, packets from the device are processed by Linux as usual.\r\nDefault is true.\r\n\r\n\r\n\r\n\r\n ALIGNMENT\r\n Specifies the alignment of packets emitted by this FromDevice, in the form\r\n\"ALIGN OFFSET\", such as \"4 0\".  FromDevice does not process this argument\r\nitself, but the click-align tool parses the argument and uses it in its\r\ncalculations.  The default ALIGNMENT is 4 2.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"FromDevice(DEVNAME [, keywords PROMISC, BURST, TIMESTAMP...])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/FromDevice/undefined","blockDefId":"FromDevice-1.0","ports":[{"name":"out0","portIndex":0,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk1_po0","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":0,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":30,"cy":16,"id":"ns3_bk1_po1","multiplicity":"*","name":"vport0","path":"M 30 18 A 2 2 1 1 1 30 14 A 2 2 1 1 1 30 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk1_po0","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk1_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk2","name":"ToDevice","instanceName":"ToDevice0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","clickInfo":"ToDevice(vlan327)","blockDefId":"ToDevice-1.0","orientation":0,"definition":{"name":"ToDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"ToDevice(DEVNAME [, BURST, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/ToDevice/undefined","blockDefId":"ToDevice-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"pull","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk2_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"pull","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk2_po1","multiplicity":"*","name":"vport0","path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk2_po0","name":"in0","role":"input","processing":"pull","multiplicity":"*"},{"enable":true,"id":"ns3_bk2_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk3","name":"Queue","instanceName":"Queue0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk3_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk3_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk3_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk4_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk4_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk4_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk4","name":"Queue","instanceName":"Queue1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk4_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk4_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk4_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk5_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk5_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk5_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk5","name":"Classifier","instanceName":"Classifier0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Classification_and_Selection","description":"Classifies packets. The Classifier has N outputs, each associated with the\r\ncorresponding pattern from the configuration string.\r\nA pattern is a set of clauses, where each clause is either \"offset/value\"\r\nor \"offset/value%mask\". A pattern matches if the packet has the indicated\r\nvalue at each offset.\r\nThe clauses in each pattern are separated\r\nby spaces. A clause consists of the offset, \"/\", the value, and (optionally)\r\n\"%\" and a mask. The offset is in decimal. The value and mask are in hex.\r\nThe length of the value is implied by the number of hex digits, which must\r\nbe even. \"?\" is also allowed as a \"hex digit\"; it means \"don't care about\r\nthe value of this nibble\".\r\nIf present, the mask must have the same number of hex digits as the value.\r\nThe matcher will only check bits that are 1 in the mask.\r\nA clause may be preceded by \"!\", in which case the clause must NOT match\r\nthe packet.\r\nAs a special case, a pattern consisting of \"-\" matches every packet.\r\nThe patterns are scanned in order, and the packet is sent to the output\r\ncorresponding to the first matching pattern. Thus more specific patterns\r\nshould come before less specific ones. You will get a warning if no packet\r\ncould ever match a pattern. Usually, this is because an earlier pattern is\r\nmore general, or because your pattern is contradictory (`12/0806 12/0800').\r\n","clickInfo":"Classifier(12/0800, -)","blockDefId":"Classifier-1.0","orientation":0,"definition":{"name":"Classifier","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Classification_and_Selection","description":"Classifies packets. The Classifier has N outputs, each associated with the\r\ncorresponding pattern from the configuration string.\r\nA pattern is a set of clauses, where each clause is either \"offset/value\"\r\nor \"offset/value%mask\". A pattern matches if the packet has the indicated\r\nvalue at each offset.\r\nThe clauses in each pattern are separated\r\nby spaces. A clause consists of the offset, \"/\", the value, and (optionally)\r\n\"%\" and a mask. The offset is in decimal. The value and mask are in hex.\r\nThe length of the value is implied by the number of hex digits, which must\r\nbe even. \"?\" is also allowed as a \"hex digit\"; it means \"don't care about\r\nthe value of this nibble\".\r\nIf present, the mask must have the same number of hex digits as the value.\r\nThe matcher will only check bits that are 1 in the mask.\r\nA clause may be preceded by \"!\", in which case the clause must NOT match\r\nthe packet.\r\nAs a special case, a pattern consisting of \"-\" matches every packet.\r\nThe patterns are scanned in order, and the packet is sent to the output\r\ncorresponding to the first matching pattern. Thus more specific patterns\r\nshould come before less specific ones. You will get a warning if no packet\r\ncould ever match a pattern. Usually, this is because an earlier pattern is\r\nmore general, or because your pattern is contradictory (`12/0806 12/0800').\r\n","bgColor":"undefined","clickInfo":"Classifier(pattern1, ..., patternN)","elementclassText":"","width":60,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Classification_and_Selection/Classifier/undefined","blockDefId":"Classifier-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 28 0 L 32 0 L 30 4 z","cx":30,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 4 14 L 8 14 L 8 18 L 4 18 z","cx":6,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 16 14 L 20 14 L 20 18 L 16 18 z","cx":18,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out3","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 40 14 L 44 14 L 44 18 L 40 18 z","cx":42,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out4","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 52 14 L 56 14 L 56 18 L 52 18 z","cx":54,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":30,"cy":2,"id":"ns3_bk5_po0","multiplicity":"*","name":"in0","path":"M 28 0 L 32 0 L 30 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6,"cy":16,"id":"ns3_bk5_po1","multiplicity":"*","name":"out0","path":"M 4 14 L 8 14 L 8 18 L 4 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":18,"cy":16,"id":"ns3_bk5_po2","multiplicity":"*","name":"out1","path":"M 16 14 L 20 14 L 20 18 L 16 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk5_po3","multiplicity":"*","name":"out2","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":42,"cy":16,"id":"ns3_bk5_po4","multiplicity":"*","name":"out3","path":"M 40 14 L 44 14 L 44 18 L 40 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":54,"cy":16,"id":"ns3_bk5_po5","multiplicity":"*","name":"out4","path":"M 52 14 L 56 14 L 56 18 L 52 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk6_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po3","name":"out2","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po4","name":"out3","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk6_po5","name":"out4","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns3_bk6","name":"Align","instanceName":"Align0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Aligns packet data. Each input packet is aligned so that its first byte is\r\nOFFSET bytes off from a MODULUS-byte boundary. This may involve a packet\r\ncopy.\r\nMODULUS must be 2, 4, or 8.\r\n","clickInfo":"Align(4, 0)","blockDefId":"Align-1.0","orientation":0,"definition":{"name":"Align","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Aligns packet data. Each input packet is aligned so that its first byte is\r\nOFFSET bytes off from a MODULUS-byte boundary. This may involve a packet\r\ncopy.\r\nMODULUS must be 2, 4, or 8.\r\n","bgColor":"undefined","clickInfo":"Align(MODULUS, OFFSET)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Align/undefined","blockDefId":"Align-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk6_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk6_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk7_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk7_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk7","name":"Strip","instanceName":"Strip0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Deletes the first LENGTH bytes from each packet.\r\n","clickInfo":"Strip(14)","blockDefId":"Strip-1.0","orientation":0,"definition":{"name":"Strip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Deletes the first LENGTH bytes from each packet.\r\n","bgColor":"undefined","clickInfo":"Strip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Strip/undefined","blockDefId":"Strip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk7_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk7_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk8_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk8_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk8","name":"Unstrip","instanceName":"Unstrip0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","clickInfo":"Unstrip(14)","blockDefId":"Unstrip-1.0","orientation":0,"definition":{"name":"Unstrip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","bgColor":"undefined","clickInfo":"Unstrip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Unstrip/undefined","blockDefId":"Unstrip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk8_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk8_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk9_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk9_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk9","name":"Unstrip","instanceName":"Unstrip1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","clickInfo":"Unstrip(14)","blockDefId":"Unstrip-1.0","orientation":0,"definition":{"name":"Unstrip","type":"click-user","ver":"1.0","maxInstance":"*","category":"Basic_Packet_Modification","description":"Put LENGTH bytes at the front of the packet. These LENGTH bytes may be bytes\r\npreviously removed by Strip.\r\n","bgColor":"undefined","clickInfo":"Unstrip(LENGTH)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Basic_Packet_Modification/Unstrip/undefined","blockDefId":"Unstrip-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk9_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk9_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk10_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk10_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk11","name":"EtherSwitch","instanceName":"EtherSwitch0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Ethernet","description":"Expects and produces Ethernet packets.  Each pair of corresponding ports\r\n(e.g., input 0 and output 0, and input 1 and output 1, and so forth)\r\ncorresponds to a LAN.  Acts as a learning, forwarding Ethernet switch among\r\nthose LANs.\r\nOn receiving a packet on input port I with source address A, EtherSwitch\r\nassociates A with I.  Future packets destined for A are sent to output I\r\n(unless they came from input I, in which case they are dropped).  Packets sent\r\nto an unknown destination address are forwarded to every output port, except\r\nthe one corresponding to the packet's input port.  The TIMEOUT parameter\r\naffects how long port associations last.  If it is 0, then the element does\r\nnot learn addresses, and acts like a dumb hub.\r\nKeyword arguments are:\r\n\r\n\r\n TIMEOUT\r\n The timeout for port associations, in seconds.  Any port mapping (i.e.,\r\nbinding between an address and a port number) is dropped after TIMEOUT seconds\r\nof inactivity.  If 0, the element acts like a dumb hub.  Default is 300.\r\n\r\n\r\n","clickInfo":"EtherSwitch()","blockDefId":"EtherSwitch-1.0","orientation":0,"definition":{"name":"EtherSwitch","type":"click-user","ver":"1.0","maxInstance":"*","category":"Ethernet","description":"Expects and produces Ethernet packets.  Each pair of corresponding ports\r\n(e.g., input 0 and output 0, and input 1 and output 1, and so forth)\r\ncorresponds to a LAN.  Acts as a learning, forwarding Ethernet switch among\r\nthose LANs.\r\nOn receiving a packet on input port I with source address A, EtherSwitch\r\nassociates A with I.  Future packets destined for A are sent to output I\r\n(unless they came from input I, in which case they are dropped).  Packets sent\r\nto an unknown destination address are forwarded to every output port, except\r\nthe one corresponding to the packet's input port.  The TIMEOUT parameter\r\naffects how long port associations last.  If it is 0, then the element does\r\nnot learn addresses, and acts like a dumb hub.\r\nKeyword arguments are:\r\n\r\n\r\n TIMEOUT\r\n The timeout for port associations, in seconds.  Any port mapping (i.e.,\r\nbinding between an address and a port number) is dropped after TIMEOUT seconds\r\nof inactivity.  If 0, the element acts like a dumb hub.  Default is 300.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"EtherSwitch([keywords TIMEOUT])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Ethernet/EtherSwitch/undefined","blockDefId":"EtherSwitch-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","cx":6.666666666666667,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"in1","portIndex":1,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"in2","portIndex":2,"role":"input","processing":"push","val":null,"path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","cx":33.333333333333336,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","cx":6.666666666666667,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","cx":33.333333333333336,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":3,"cx":6.666666666666667,"cy":2,"id":"ns3_bk11_po0","multiplicity":"*","name":"in0","path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk11_po1","multiplicity":"*","name":"in1","path":"M 18 0 L 22 0 L 20 4 z","portIndex":1,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":2,"id":"ns3_bk11_po2","multiplicity":"*","name":"in2","path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","portIndex":2,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6.666666666666667,"cy":16,"id":"ns3_bk11_po3","multiplicity":"*","name":"out0","path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk11_po4","multiplicity":"*","name":"out1","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":16,"id":"ns3_bk11_po5","multiplicity":"*","name":"out2","path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk12_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po1","name":"in1","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po2","name":"in2","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po3","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po4","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk12_po5","name":"out2","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns3_bk14","name":"KernelTap","instanceName":"KernelTap0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads Ethernet packets from and writes Ethernet packets to a /dev/tun* or\r\n/dev/tap* device.  This allows a user-level Click to hand packets to the\r\nvirtual Ethernet device.  KernelTap will also transfer packets from the\r\nvirtual Ethernet device.\r\nKernelTap allocates a /dev/tun* or tap* device (this might fail) and runs\r\nifconfig to set the interface's local (i.e., kernel) address to ADDR and\r\nthe netmask to MASK.  If a nonzero GATEWAY IP address (which must be on the\r\nsame network as the tun) is specified, then KernelTap tries to set up a\r\ndefault route through that host.\r\nKeyword arguments are:\r\n\r\n\r\n ETHER\r\n Ethernet address. Specifies the fake device's Ethernet address. Default is\r\n00:01:02:03:04:05. On Linux, you must supply an ETHER argument, and use that\r\naddress as the destination Ethernet address for all packets sent to the tap\r\nelement; otherwise, Linux will ignore your packets. On FreeBSD, there is no\r\nway to set the Ethernet address, and any ETHER argument is silently ignored,\r\nbut it is safe to use any destination Ethernet address for packets sent to the\r\ntap.\r\n\r\n\r\n\r\n\r\n MTU\r\n Integer.  The interface's maximum transmission unit, not including the\r\nEthernet header.  Default is 1500; some operating systems do not allow it to\r\nbe set.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer.  The number of bytes left empty before the packet data (to leave room\r\nfor additional encapsulation headers).  Default is 0.\r\n\r\n\r\n\r\n\r\n IGNORE_QUEUE_OVERFLOWS\r\n Boolean.  If true, don't print more than one error message when there are\r\nqueue overflow errors (ENOBUFS) when sending or receiving packets via the tun\r\ndevice.  Default is false.\r\nKernelTap accepts the same arguments as KernelTun.\r\n\r\n\r\n","clickInfo":"KernelTap(10.1.1.2/24, ETHER 02:b3:12:98:ec:70)","blockDefId":"KernelTap-1.0","orientation":0,"definition":{"name":"KernelTap","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Reads Ethernet packets from and writes Ethernet packets to a /dev/tun* or\r\n/dev/tap* device.  This allows a user-level Click to hand packets to the\r\nvirtual Ethernet device.  KernelTap will also transfer packets from the\r\nvirtual Ethernet device.\r\nKernelTap allocates a /dev/tun* or tap* device (this might fail) and runs\r\nifconfig to set the interface's local (i.e., kernel) address to ADDR and\r\nthe netmask to MASK.  If a nonzero GATEWAY IP address (which must be on the\r\nsame network as the tun) is specified, then KernelTap tries to set up a\r\ndefault route through that host.\r\nKeyword arguments are:\r\n\r\n\r\n ETHER\r\n Ethernet address. Specifies the fake device's Ethernet address. Default is\r\n00:01:02:03:04:05. On Linux, you must supply an ETHER argument, and use that\r\naddress as the destination Ethernet address for all packets sent to the tap\r\nelement; otherwise, Linux will ignore your packets. On FreeBSD, there is no\r\nway to set the Ethernet address, and any ETHER argument is silently ignored,\r\nbut it is safe to use any destination Ethernet address for packets sent to the\r\ntap.\r\n\r\n\r\n\r\n\r\n MTU\r\n Integer.  The interface's maximum transmission unit, not including the\r\nEthernet header.  Default is 1500; some operating systems do not allow it to\r\nbe set.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer.  The number of bytes left empty before the packet data (to leave room\r\nfor additional encapsulation headers).  Default is 0.\r\n\r\n\r\n\r\n\r\n IGNORE_QUEUE_OVERFLOWS\r\n Boolean.  If true, don't print more than one error message when there are\r\nqueue overflow errors (ENOBUFS) when sending or receiving packets via the tun\r\ndevice.  Default is false.\r\nKernelTap accepts the same arguments as KernelTun.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"KernelTap(ADDR/MASK [, GATEWAY, keywords ETHER, MTU, HEADROOM, IGNORE_QUEUE_OVERFLOWS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/KernelTap/undefined","blockDefId":"KernelTap-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk14_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk14_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk14_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk14_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk14_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk14_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk15","name":"CheckIPHeader2","instanceName":"CheckIPHeader0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"This element behaves exactly like CheckIPHeader, except that it does not by\r\ndefault check packets' IP checksums.\r\n","clickInfo":"CheckIPHeader()","blockDefId":"CheckIPHeader2-1.0","orientation":0,"definition":{"name":"CheckIPHeader2","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"This element behaves exactly like CheckIPHeader, except that it does not by\r\ndefault check packets' IP checksums.\r\n","bgColor":"undefined","clickInfo":"CheckIPHeader2([OFFSET, keywords])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/CheckIPHeader2/undefined","blockDefId":"CheckIPHeader2-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk15_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk15_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk15_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk16_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk16_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk16_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns3_bk16","name":"IPClassifier","instanceName":"IPClassifier0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","clickInfo":"IPClassifier(tcp, -)","blockDefId":"IPClassifier-1.0","orientation":0,"definition":{"name":"IPClassifier","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Classifies IP packets according to tcpdump-like patterns. The\r\nIPClassifier has N outputs, each associated with the corresponding pattern\r\nfrom the configuration string. The input packets must have their IP header\r\nannotation set; CheckIPHeader and MarkIPHeader do this.\r\nPatterns are built from pattern primitives. The primitives\r\nIPClassifier understands are:\r\n\r\n\r\n ip proto PROTO\r\n PROTO is an IP protocol name (see below) or a valid IP protocol number.\r\nMatches packets of the given protocol.\r\n\r\n\r\n\r\n\r\n [SRCORDST] host IPADDR\r\n IPADDR is an IP address and SRCORDST is 'src', 'dst', 'src or dst', or 'src\r\nand dst'. (If SRCORDST is missing, 'src or dst' is assumed.) Matches\r\npackets sent to and/or from the given address.\r\n\r\n\r\n\r\n\r\n [SRCORDST] net NETADDR\r\n NETADDR is an IP network address (either CIDR-style 'IPADDR/BITS' or\r\n'IPADDR mask MASK') and SRCORDST is as above. Matches packets sent to\r\nand/or from the given network.\r\n\r\n\r\n\r\n\r\n [SRCORDST] [tcp | udp] port PORT\r\n PORT is a TCP or UDP port name (see below) or number and SRCORDST is as\r\nabove. Matches packets sent to and/or from the given TCP or UDP port. If\r\nyou leave out 'tcp' or 'udp', then either TCP or UDP is accepted.\r\n\r\n\r\n\r\n\r\n ip vers VERSION\r\n VERSION is a value between 0 and 15. Matches IP packets with the given\r\nversion.\r\n\r\n\r\n\r\n\r\n ip hl HL\r\n HL is a value between 0 and 15. Matches IP packets with the given header\r\nlength.\r\n\r\n\r\n\r\n\r\n ip id ID\r\n ID is a value between 0 and 65535. Matches IP packets with the given IP ID.\r\n\r\n\r\n\r\n\r\n ip tos TOS\r\n TOS is a value between 0 and 255. Matches IP packets with the given TOS\r\nvalue.\r\n\r\n\r\n\r\n\r\n ip dscp DSCP\r\n DSCP is a value between 0 and 63. Matches IP packets with the given DSCP\r\nvalue (the upper 6 bits of TOS).\r\n\r\n\r\n\r\n\r\n ip ect\r\n Matches IP packets with ECN Capable Transport turned on.\r\n\r\n\r\n\r\n\r\n ip ce\r\n Matches IP packets with ECN Congestion Experienced set.\r\n\r\n\r\n\r\n\r\n ip ttl TTL\r\n TTL is a value between 0 and 255. Matches IP packets with the given TTL value.\r\n\r\n\r\n\r\n\r\n ip frag\r\n Matches fragmented IP packets (that is, packets with the more-fragments bit\r\nset and/or a nonzero fragment offset).\r\n\r\n\r\n\r\n\r\n ip unfrag\r\n Equivalent to 'not ip frag'.\r\n\r\n\r\n\r\n\r\n tcp opt TCPOPT\r\n TCPOPT is a TCP option name (see below). Matches TCP packets with the given\r\noption.\r\n\r\n\r\n\r\n\r\n tcp win TCPWIN\r\n TCPWIN is a TCP receive window length. Matches TCP packets with the given\r\nwindow length. Note that window scaling is not applied.\r\n\r\n\r\n\r\n\r\n icmp type TYPE\r\n TYPE is a value between 0 and 255 or an ICMP type name (see below). Matches\r\nICMP packets with the given ICMP type.\r\n\r\n\r\n\r\n\r\n ip[POS:LEN] VALUE\r\n Matches packets whose IP header field starting at byte position POS, and going\r\non for LEN bytes, equals VALUE.  You can say ip[POS] instead of\r\nip[POS:1].\r\n\r\n\r\n\r\n\r\n transp[POS:LEN] VALUE\r\n Like ip[POS:LEN], but for transport header fields.  You can also give\r\nparticular transport protocols, such as tcp[POS:LEN].\r\n\r\n\r\n\r\n\r\n [SRCORDST] ether host ETH\r\n Matches packets whose source and/or destination Ethernet address matches ETH.\r\nThe packet's MAC header annotation must be set.\r\n\r\n\r\n\r\n\r\n true\r\n Matches every packet.\r\n\r\n\r\n\r\n\r\n false\r\n Matches no packets.\r\nThese primitives can be combined with the connectives 'and', 'or', and 'not'\r\n(synonyms '&&', '||', and '!'), with the ternary operator '?:' (the colon\r\nmust be surrounded by spaces!), and with parentheses. For example, '(dst port\r\nwww or dst port ssh) and tcp opt syn'.\r\nAll primitives except tcp opt accept an optional OPERATION, '==' or '!=',\r\nwhich can occur before the actual option.  If no OPERATION is specified, '=='\r\nis assumed.  'src host == 10.0.0.10' matches packets whose source host is\r\n10.0.0.10; 'src host != 10.0.0.10' matches packets whose source host is not\r\n10.0.0.10.  Directives with integer values also support the '<', '>', '<=',\r\nand '>=' operations.\r\nFor port and icmp type directives, 'DIRECTIVE != VALUE' is not the\r\nsame as 'not (DIRECTIVE == VALUE)'. For example, 'src tcp port != 5'\r\nmatches TCP packets whose source port is not 5, while '!(src tcp port ==\r\n5)' matches non-TCP packets as well. (The 'src tcp port != 5' option is\r\neffectively equivalent to 'tcp and not src tcp port 5'.) Similarly, 'icmp\r\ntype != 4' will not match non-ICMP packets. The same goes for the '<', '>',\r\n'<=', and '>=' relations.\r\nMost primitives also accept bitmasks: 'DIRECTIVE & MASK  udp] port**, **icmp type**, **tcp opt**, and **tcp win** directives can\r\nonly be true on the first fragment of a fragmented packet.\r\nEvery IPClassifier element has an equivalent corresponding [[IPFilter element\r\nand vice versa. Use the element whose syntax is more convenient for your\r\nneeds.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"IPClassifier(PATTERN_1, ..., PATTERN_N)","elementclassText":"","width":60,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/IPClassifier/undefined","blockDefId":"IPClassifier-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 28 0 L 32 0 L 30 4 z","cx":30,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"push","val":null,"path":"M 4 14 L 8 14 L 8 18 L 4 18 z","cx":6,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"push","val":null,"path":"M 16 14 L 20 14 L 20 18 L 16 18 z","cx":18,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out2","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out3","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 40 14 L 44 14 L 44 18 L 40 18 z","cx":42,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out4","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 52 14 L 56 14 L 56 18 L 52 18 z","cx":54,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":30,"cy":2,"id":"ns3_bk16_po0","multiplicity":"*","name":"in0","path":"M 28 0 L 32 0 L 30 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6,"cy":16,"id":"ns3_bk16_po1","multiplicity":"*","name":"out0","path":"M 4 14 L 8 14 L 8 18 L 4 18 z","portIndex":1,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":18,"cy":16,"id":"ns3_bk16_po2","multiplicity":"*","name":"out1","path":"M 16 14 L 20 14 L 20 18 L 16 18 z","portIndex":2,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk16_po3","multiplicity":"*","name":"out2","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":42,"cy":16,"id":"ns3_bk16_po4","multiplicity":"*","name":"out3","path":"M 40 14 L 44 14 L 44 18 L 40 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":54,"cy":16,"id":"ns3_bk16_po5","multiplicity":"*","name":"out4","path":"M 52 14 L 56 14 L 56 18 L 52 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk17_po0","name":"in0","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po1","name":"out0","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po2","name":"out1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po3","name":"out2","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po4","name":"out3","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns0_bk17_po5","name":"out4","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns3_bk18","name":"Queue","instanceName":"Queue2","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk18_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk18_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk18_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk19_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk19_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk19_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk19","name":"NetCacheElement","instanceName":"NetCacheElement0","type":"click-user","ver":"1.0","maxInstance":"*","category":"smpclick","description":"","clickInfo":"NetCacheElement(EGRESS)","blockDefId":"NetCacheElement-1.0","orientation":0,"definition":{"name":"NetCacheElement","type":"click-user","ver":"1.0","maxInstance":"*","category":"smpclick","description":"","bgColor":"rgb(255, 255, 255)","clickInfo":"NetCacheElement()","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/smpclick/NetCacheElement/undefined","blockDefId":"NetCacheElement-1.0","ports":[{"name":"input","portIndex":0,"role":"input","processing":"push","val":null,"path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","cx":6.666666666666667,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"socketin1","portIndex":1,"role":"input","processing":"push","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"socketin2","portIndex":2,"role":"input","processing":"push","val":null,"path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","cx":33.333333333333336,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"output","portIndex":3,"role":"output","processing":"push","val":null,"path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","cx":6.666666666666667,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"socketout1","portIndex":4,"role":"output","processing":"push","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"socketout2","portIndex":5,"role":"output","processing":"push","val":null,"path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","cx":33.333333333333336,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":6.666666666666667,"cy":2,"id":"ns3_bk19_po0","multiplicity":"*","name":"input","path":"M 4.666666666666667 0 L 8.666666666666668 0 L 6.666666666666667 4 z","portIndex":0,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":20,"cy":2,"id":"ns3_bk19_po1","multiplicity":"*","name":"socketin1","path":"M 18 0 L 22 0 L 20 4 z","portIndex":1,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":33.333333333333336,"cy":2,"id":"ns3_bk19_po2","multiplicity":"*","name":"socketin2","path":"M 31.333333333333336 0 L 35.333333333333336 0 L 33.333333333333336 4 z","portIndex":2,"position":"top","processing":"push","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":6.666666666666667,"cy":16,"id":"ns3_bk19_po3","multiplicity":"*","name":"output","path":"M 4.666666666666667 14 L 8.666666666666668 14 L 8.666666666666668 18 L 4.666666666666667 18 z","portIndex":3,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk19_po4","multiplicity":"*","name":"socketout1","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":4,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":33.333333333333336,"cy":16,"id":"ns3_bk19_po5","multiplicity":"*","name":"socketout2","path":"M 31.333333333333336 14 L 35.333333333333336 14 L 35.333333333333336 18 L 31.333333333333336 18 z","portIndex":5,"position":"bottom","processing":"push","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk19_po0","name":"input","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk19_po1","name":"socketin1","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk19_po2","name":"socketin2","role":"input","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk19_po3","name":"output","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk19_po4","name":"socketout1","role":"output","processing":"push","multiplicity":"*"},{"enable":true,"id":"ns3_bk19_po5","name":"socketout2","role":"output","processing":"push","multiplicity":"*"}]},{"id":"ns3_bk20","name":"SetIPChecksum","instanceName":"SetIPChecksum0","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Expects an IP packet as input.\r\nCalculates the IP header's checksum and sets the checksum header field.\r\nYou will not normally need SetIPChecksum. Most elements that modify an IP\r\nheader, like DecIPTTL, SetIPDSCP, and IPRewriter, already update the\r\nchecksum incrementally.\r\n","clickInfo":"SetIPChecksum()","blockDefId":"SetIPChecksum-1.0","orientation":0,"definition":{"name":"SetIPChecksum","type":"click-user","ver":"1.0","maxInstance":"*","category":"IPv4","description":"Expects an IP packet as input.\r\nCalculates the IP header's checksum and sets the checksum header field.\r\nYou will not normally need SetIPChecksum. Most elements that modify an IP\r\nheader, like DecIPTTL, SetIPDSCP, and IPRewriter, already update the\r\nchecksum incrementally.\r\n","bgColor":"undefined","clickInfo":"SetIPChecksum()","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/IPv4/SetIPChecksum/undefined","blockDefId":"SetIPChecksum-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk20_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk20_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns0_bk21_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns0_bk21_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk21","name":"ToDevice","instanceName":"ToDevice1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","clickInfo":"ToDevice(vlan309)","blockDefId":"ToDevice-1.0","orientation":0,"definition":{"name":"ToDevice","type":"click-user","ver":"1.0","maxInstance":"*","category":"Network_Devices","description":"This manual page describes the Linux kernel module version of the ToDevice\r\nelement. For the user-level element, read the ToDevice.u manual page.\r\nPulls packets from its single input and sends them out the Linux network\r\ninterface named DEVNAME. DEVNAME may also be an Ethernet address, in which\r\ncase ToDevice searches for a device with that address.\r\nSends up to BURST packets each time it is scheduled. By default, BURST is 16.\r\nFor good performance, you should set BURST to be 8 times the number of\r\nelements that could generate packets for this device.\r\nPackets must have a link header. For Ethernet, ToDevice makes sure every\r\npacket is at least 60 bytes long (but see NO_PAD).\r\nKeyword arguments are:\r\n\r\n\r\n BURST\r\n Unsigned integer. Same as the BURST argument.\r\n\r\n\r\n\r\n\r\n QUIET\r\n Boolean.  If true, then suppress device up/down messages.  Default is false.\r\n\r\n\r\n\r\n\r\n QUEUE\r\n Integer.  The transmit queue to send to.  Default is 0.\r\n\r\n\r\n\r\n\r\n ALLOW_NONEXISTENT\r\n Allow nonexistent devices. If true, and no device named DEVNAME exists when\r\nthe router is initialized, then ToDevice will report a warning (rather than an\r\nerror). Later, while the router is running, if a device named DEVNAME appears,\r\nToDevice will seamlessly begin sending packets to it. Default is false.\r\n\r\n\r\n\r\n\r\n NO_PAD\r\n Boolean. If true, don't force packets to be at least 60 bytes (the\r\nminimum Ethernet packet size).  This is useful because some 802.11\r\ncards can send shorter Ethernet format packets.  Defaults false.\r\n\r\n\r\n\r\n\r\n UP_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ncomes up.\r\n\r\n\r\n\r\n\r\n DOWN_CALL\r\n Write handler.  If supplied, this handler is called when the device or link\r\ngoes down.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"ToDevice(DEVNAME [, BURST, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Network_Devices/ToDevice/undefined","blockDefId":"ToDevice-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"pull","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"vport0","portIndex":0,"role":"vport","processing":"*","val":null,"path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk21_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"pull","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":20,"cy":16,"id":"ns3_bk21_po1","multiplicity":"*","name":"vport0","path":"M 20 18 A 2 2 1 1 1 20 14 A 2 2 1 1 1 20 18","portIndex":0,"position":"bottom","processing":"*","role":"vport","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk21_po0","name":"in0","role":"input","processing":"pull","multiplicity":"*"},{"enable":true,"id":"ns3_bk21_po1","name":"vport0","role":"vport","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk23","name":"Queue","instanceName":"Queue3","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk23_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk23_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk23_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk23_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk23_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk23_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk24","name":"Queue","instanceName":"Queue4","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","clickInfo":"Queue()","blockDefId":"Queue-1.0","orientation":0,"definition":{"name":"Queue","type":"click-user","ver":"1.0","maxInstance":"*","category":"Packet_Storage","description":"Stores incoming packets in a first-in-first-out queue.\r\nDrops incoming packets if the queue already holds CAPACITY packets.\r\nThe default for CAPACITY is 1000.\r\nQueue notifies interested parties when it becomes empty and when a\r\nformerly-empty queue receives a packet.  The empty notification takes place\r\nsome time after the queue goes empty, to prevent thrashing for queues that\r\nhover around 1 or 2 packets long.  This behavior is the same as that of\r\nNotifierQueue.  (See QuickNoteQueue for an alternative.)  Queue additionally\r\nnotifies interested parties that it is non-full, and when a formerly-full\r\nqueue gains some free space.  In all respects but notification, Queue behaves\r\nexactly like SimpleQueue.\r\nYou may also use the old element name \"FullNoteQueue\".\r\nMultithreaded Click note: Queue is designed to be used in an environment\r\nwith at most one concurrent pusher and at most one concurrent puller.  Thus,\r\nat most one thread pushes to the Queue at a time and at most one thread pulls\r\nfrom the Queue at a time.  Different threads can push to and pull from the\r\nQueue concurrently, however.  See ThreadSafeQueue for a queue that can support\r\nmultiple concurrent pushers and pullers.\r\n","bgColor":"undefined","clickInfo":"QueueQueue(CAPACITY)","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Packet_Storage/Queue/undefined","blockDefId":"Queue-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 8 14 L 12 14 L 12 18 L 8 18 z","cx":10,"cy":16,"multiplicity":"*","schemeName":"Click"},{"name":"out1","portIndex":2,"role":"output","processing":"*","val":null,"path":"M 28 14 L 32 14 L 32 18 L 28 18 z","cx":30,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk24_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":1,"cx":10,"cy":16,"id":"ns3_bk24_po1","multiplicity":"*","name":"out0","path":"M 8 14 L 12 14 L 12 18 L 8 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":30,"cy":16,"id":"ns3_bk24_po2","multiplicity":"*","name":"out1","path":"M 28 14 L 32 14 L 32 18 L 28 18 z","portIndex":2,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk24_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk24_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk24_po2","name":"out1","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk25","name":"Socket","instanceName":"Socket0","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Transports packets over various types of sockets. Packets do not flow\r\nthrough Socket elements (i.e., Socket is an \"x/y\" element). Instead,\r\ninput packets are sent to a remote host or process, and packets\r\nreceived from the remote host or process are emitted on the output.\r\nA Socket element of type \"TCP\" or \"UNIX\" may be either a server (the\r\ndefault if CLIENT is not set) or a client (if CLIENT is set or if the\r\nelement has no outputs). If a server, the specified address/port/file\r\nis bound and connections are accepted one at a time. If a client, a\r\nconnection attempt is made to the specified address/port/file during\r\nelement initialization.\r\nA Socket element of type \"UDP\" or \"UNIX_DGRAM\" may also be either a\r\nserver or client. However, because datagram sockets are not connection\r\noriented, a datagram server may receive (and thus emit) packets from\r\nmultiple remote hosts or processes. If a server, input packets are\r\nsent to the last remote host or process to send a packet to the\r\nserver. If a client, input packets are sent to the specified\r\naddress/port/file.\r\nFor convenience, if a client UDP Socket is configured with a zero IP\r\naddress, the Socket will send input packets to the destination IP\r\nannotation of each packet.\r\nIf \"LOCALIP\"/\"LOCALPORTNUMBER\" or \"LOCALFILENAME\" is specified, CLIENT\r\nis assumed if not set and the specified local address/port/file will\r\nbe bound before the connection attempt is made. If CLIENT is set to\r\nfalse, any \"LOCALIP\"/\"LOCALPORTNUMBER\" and \"LOCALFILENAME\" arguments\r\nare ignored.\r\nSocket inputs are agnostic, i.e., they may be either \"pull\" or\r\n\"push\". If pushed, packets will block on the underlying socket;\r\notherwise, the socket will pull packets as it can accept them. For\r\nbest performance, place a Notifier element (such as NotifierQueue)\r\nupstream of a \"pull\" Socket.\r\nKeyword arguments are:\r\n\r\n\r\n SNAPLEN\r\n Unsigned integer. Maximum length of packets that can be\r\nreceived. Default is 2048 bytes.\r\n\r\n\r\n\r\n\r\n NODELAY\r\n Boolean. Applies to TCP sockets only. If set, disable the Nagle\r\nalgorithm. This means that segments are always sent as soon as\r\npossible, even if there is only a small amount of data. When not set,\r\ndata is buffered until there is a sufficient amount to send out,\r\nthereby avoiding the frequent sending of small packets, which results\r\nin poor utilization of the network. Default is true.\r\n\r\n\r\n\r\n\r\n CLIENT\r\n Boolean. If set, forces the socket to connect() (if SOCK_STREAM) to\r\nthe specified address/port (if AF_INET) or file handle (if AF_UNIX),\r\ninstead of bind()-ing and listen()-ing to it.\r\nDefault is false. However, if a Socket element has no output and\r\nCLIENT is unspecified, it is assumed to be a client socket. If a\r\nSocket element has no input and CLIENT is unspecified, it is assumed\r\nto be a server socket.\r\n\r\n\r\n\r\n\r\n SNDBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket send buffer. The default value is set by the wmem_default\r\nsysctl and the maximum allowed value is set by the wmem_max sysctl.\r\n\r\n\r\n\r\n\r\n RCVBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket receive buffer. The default value is set by the rmem_default\r\nsysctl and the maximum allowed value is set by the rmem_max sysctl.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean. If set, sets the timestamp field on received packets to the\r\ncurrent time. Default is true.\r\n\r\n\r\n\r\n\r\n ALLOW\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is accepted. If the address is not found, the DENY table will\r\nthen be checked (see below).\r\n\r\n\r\n\r\n\r\n DENY\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is dropped, otherwise it is accepted. Note that the ALLOW\r\ntable, if specified, is checked first. Wildcard matches may be\r\nspecified with netmasks; for example, to deny all hosts, specify a\r\nroute to \"0.0.0.0/0\" in the DENY table.\r\n\r\n\r\n\r\n\r\n VERBOSE\r\n Boolean. When true, Socket will print messages whenever it accepts a\r\nnew connection or drops an old one. Default is false.\r\n\r\n\r\n\r\n\r\n PROPER\r\n Boolean. PlanetLab specific. If true and Click has been configured\r\n--with-proper, use Proper to bind a reserved port.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer. Per-packet headroom. Defaults to 28.\r\n\r\n\r\n","clickInfo":"Socket(Udp, 10.1.1.1, 50000)","blockDefId":"Socket-1.0","orientation":0,"definition":{"name":"Socket","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Transports packets over various types of sockets. Packets do not flow\r\nthrough Socket elements (i.e., Socket is an \"x/y\" element). Instead,\r\ninput packets are sent to a remote host or process, and packets\r\nreceived from the remote host or process are emitted on the output.\r\nA Socket element of type \"TCP\" or \"UNIX\" may be either a server (the\r\ndefault if CLIENT is not set) or a client (if CLIENT is set or if the\r\nelement has no outputs). If a server, the specified address/port/file\r\nis bound and connections are accepted one at a time. If a client, a\r\nconnection attempt is made to the specified address/port/file during\r\nelement initialization.\r\nA Socket element of type \"UDP\" or \"UNIX_DGRAM\" may also be either a\r\nserver or client. However, because datagram sockets are not connection\r\noriented, a datagram server may receive (and thus emit) packets from\r\nmultiple remote hosts or processes. If a server, input packets are\r\nsent to the last remote host or process to send a packet to the\r\nserver. If a client, input packets are sent to the specified\r\naddress/port/file.\r\nFor convenience, if a client UDP Socket is configured with a zero IP\r\naddress, the Socket will send input packets to the destination IP\r\nannotation of each packet.\r\nIf \"LOCALIP\"/\"LOCALPORTNUMBER\" or \"LOCALFILENAME\" is specified, CLIENT\r\nis assumed if not set and the specified local address/port/file will\r\nbe bound before the connection attempt is made. If CLIENT is set to\r\nfalse, any \"LOCALIP\"/\"LOCALPORTNUMBER\" and \"LOCALFILENAME\" arguments\r\nare ignored.\r\nSocket inputs are agnostic, i.e., they may be either \"pull\" or\r\n\"push\". If pushed, packets will block on the underlying socket;\r\notherwise, the socket will pull packets as it can accept them. For\r\nbest performance, place a Notifier element (such as NotifierQueue)\r\nupstream of a \"pull\" Socket.\r\nKeyword arguments are:\r\n\r\n\r\n SNAPLEN\r\n Unsigned integer. Maximum length of packets that can be\r\nreceived. Default is 2048 bytes.\r\n\r\n\r\n\r\n\r\n NODELAY\r\n Boolean. Applies to TCP sockets only. If set, disable the Nagle\r\nalgorithm. This means that segments are always sent as soon as\r\npossible, even if there is only a small amount of data. When not set,\r\ndata is buffered until there is a sufficient amount to send out,\r\nthereby avoiding the frequent sending of small packets, which results\r\nin poor utilization of the network. Default is true.\r\n\r\n\r\n\r\n\r\n CLIENT\r\n Boolean. If set, forces the socket to connect() (if SOCK_STREAM) to\r\nthe specified address/port (if AF_INET) or file handle (if AF_UNIX),\r\ninstead of bind()-ing and listen()-ing to it.\r\nDefault is false. However, if a Socket element has no output and\r\nCLIENT is unspecified, it is assumed to be a client socket. If a\r\nSocket element has no input and CLIENT is unspecified, it is assumed\r\nto be a server socket.\r\n\r\n\r\n\r\n\r\n SNDBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket send buffer. The default value is set by the wmem_default\r\nsysctl and the maximum allowed value is set by the wmem_max sysctl.\r\n\r\n\r\n\r\n\r\n RCVBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket receive buffer. The default value is set by the rmem_default\r\nsysctl and the maximum allowed value is set by the rmem_max sysctl.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean. If set, sets the timestamp field on received packets to the\r\ncurrent time. Default is true.\r\n\r\n\r\n\r\n\r\n ALLOW\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is accepted. If the address is not found, the DENY table will\r\nthen be checked (see below).\r\n\r\n\r\n\r\n\r\n DENY\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is dropped, otherwise it is accepted. Note that the ALLOW\r\ntable, if specified, is checked first. Wildcard matches may be\r\nspecified with netmasks; for example, to deny all hosts, specify a\r\nroute to \"0.0.0.0/0\" in the DENY table.\r\n\r\n\r\n\r\n\r\n VERBOSE\r\n Boolean. When true, Socket will print messages whenever it accepts a\r\nnew connection or drops an old one. Default is false.\r\n\r\n\r\n\r\n\r\n PROPER\r\n Boolean. PlanetLab specific. If true and Click has been configured\r\n--with-proper, use Proper to bind a reserved port.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer. Per-packet headroom. Defaults to 28.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"Socket(\"TCP\", IP, PORTNUMBER [, LOCALIP] [, LOCALPORTNUMBER] [, KEYWORDS])Socket(\"UDP\", IP, PORTNUMBER [, LOCALIP] [, LOCALPORTNUMBER] [, KEYWORDS])Socket(\"UNIX\", FILENAME [, LOCALFILENAME] [, KEYWORDS])Socket(\"UNIX_DGRAM\", FILENAME [, LOCALFILENAME] [, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/Socket/undefined","blockDefId":"Socket-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk25_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":20,"cy":16,"id":"ns3_bk25_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk25_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk25_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]},{"id":"ns3_bk26","name":"Socket","instanceName":"Socket1","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Transports packets over various types of sockets. Packets do not flow\r\nthrough Socket elements (i.e., Socket is an \"x/y\" element). Instead,\r\ninput packets are sent to a remote host or process, and packets\r\nreceived from the remote host or process are emitted on the output.\r\nA Socket element of type \"TCP\" or \"UNIX\" may be either a server (the\r\ndefault if CLIENT is not set) or a client (if CLIENT is set or if the\r\nelement has no outputs). If a server, the specified address/port/file\r\nis bound and connections are accepted one at a time. If a client, a\r\nconnection attempt is made to the specified address/port/file during\r\nelement initialization.\r\nA Socket element of type \"UDP\" or \"UNIX_DGRAM\" may also be either a\r\nserver or client. However, because datagram sockets are not connection\r\noriented, a datagram server may receive (and thus emit) packets from\r\nmultiple remote hosts or processes. If a server, input packets are\r\nsent to the last remote host or process to send a packet to the\r\nserver. If a client, input packets are sent to the specified\r\naddress/port/file.\r\nFor convenience, if a client UDP Socket is configured with a zero IP\r\naddress, the Socket will send input packets to the destination IP\r\nannotation of each packet.\r\nIf \"LOCALIP\"/\"LOCALPORTNUMBER\" or \"LOCALFILENAME\" is specified, CLIENT\r\nis assumed if not set and the specified local address/port/file will\r\nbe bound before the connection attempt is made. If CLIENT is set to\r\nfalse, any \"LOCALIP\"/\"LOCALPORTNUMBER\" and \"LOCALFILENAME\" arguments\r\nare ignored.\r\nSocket inputs are agnostic, i.e., they may be either \"pull\" or\r\n\"push\". If pushed, packets will block on the underlying socket;\r\notherwise, the socket will pull packets as it can accept them. For\r\nbest performance, place a Notifier element (such as NotifierQueue)\r\nupstream of a \"pull\" Socket.\r\nKeyword arguments are:\r\n\r\n\r\n SNAPLEN\r\n Unsigned integer. Maximum length of packets that can be\r\nreceived. Default is 2048 bytes.\r\n\r\n\r\n\r\n\r\n NODELAY\r\n Boolean. Applies to TCP sockets only. If set, disable the Nagle\r\nalgorithm. This means that segments are always sent as soon as\r\npossible, even if there is only a small amount of data. When not set,\r\ndata is buffered until there is a sufficient amount to send out,\r\nthereby avoiding the frequent sending of small packets, which results\r\nin poor utilization of the network. Default is true.\r\n\r\n\r\n\r\n\r\n CLIENT\r\n Boolean. If set, forces the socket to connect() (if SOCK_STREAM) to\r\nthe specified address/port (if AF_INET) or file handle (if AF_UNIX),\r\ninstead of bind()-ing and listen()-ing to it.\r\nDefault is false. However, if a Socket element has no output and\r\nCLIENT is unspecified, it is assumed to be a client socket. If a\r\nSocket element has no input and CLIENT is unspecified, it is assumed\r\nto be a server socket.\r\n\r\n\r\n\r\n\r\n SNDBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket send buffer. The default value is set by the wmem_default\r\nsysctl and the maximum allowed value is set by the wmem_max sysctl.\r\n\r\n\r\n\r\n\r\n RCVBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket receive buffer. The default value is set by the rmem_default\r\nsysctl and the maximum allowed value is set by the rmem_max sysctl.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean. If set, sets the timestamp field on received packets to the\r\ncurrent time. Default is true.\r\n\r\n\r\n\r\n\r\n ALLOW\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is accepted. If the address is not found, the DENY table will\r\nthen be checked (see below).\r\n\r\n\r\n\r\n\r\n DENY\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is dropped, otherwise it is accepted. Note that the ALLOW\r\ntable, if specified, is checked first. Wildcard matches may be\r\nspecified with netmasks; for example, to deny all hosts, specify a\r\nroute to \"0.0.0.0/0\" in the DENY table.\r\n\r\n\r\n\r\n\r\n VERBOSE\r\n Boolean. When true, Socket will print messages whenever it accepts a\r\nnew connection or drops an old one. Default is false.\r\n\r\n\r\n\r\n\r\n PROPER\r\n Boolean. PlanetLab specific. If true and Click has been configured\r\n--with-proper, use Proper to bind a reserved port.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer. Per-packet headroom. Defaults to 28.\r\n\r\n\r\n","clickInfo":"Socket(Udp, 10.1.1.1, 50001)","blockDefId":"Socket-1.0","orientation":0,"definition":{"name":"Socket","type":"click-user","ver":"1.0","maxInstance":"*","category":"Host_and_Socket_Communication","description":"Transports packets over various types of sockets. Packets do not flow\r\nthrough Socket elements (i.e., Socket is an \"x/y\" element). Instead,\r\ninput packets are sent to a remote host or process, and packets\r\nreceived from the remote host or process are emitted on the output.\r\nA Socket element of type \"TCP\" or \"UNIX\" may be either a server (the\r\ndefault if CLIENT is not set) or a client (if CLIENT is set or if the\r\nelement has no outputs). If a server, the specified address/port/file\r\nis bound and connections are accepted one at a time. If a client, a\r\nconnection attempt is made to the specified address/port/file during\r\nelement initialization.\r\nA Socket element of type \"UDP\" or \"UNIX_DGRAM\" may also be either a\r\nserver or client. However, because datagram sockets are not connection\r\noriented, a datagram server may receive (and thus emit) packets from\r\nmultiple remote hosts or processes. If a server, input packets are\r\nsent to the last remote host or process to send a packet to the\r\nserver. If a client, input packets are sent to the specified\r\naddress/port/file.\r\nFor convenience, if a client UDP Socket is configured with a zero IP\r\naddress, the Socket will send input packets to the destination IP\r\nannotation of each packet.\r\nIf \"LOCALIP\"/\"LOCALPORTNUMBER\" or \"LOCALFILENAME\" is specified, CLIENT\r\nis assumed if not set and the specified local address/port/file will\r\nbe bound before the connection attempt is made. If CLIENT is set to\r\nfalse, any \"LOCALIP\"/\"LOCALPORTNUMBER\" and \"LOCALFILENAME\" arguments\r\nare ignored.\r\nSocket inputs are agnostic, i.e., they may be either \"pull\" or\r\n\"push\". If pushed, packets will block on the underlying socket;\r\notherwise, the socket will pull packets as it can accept them. For\r\nbest performance, place a Notifier element (such as NotifierQueue)\r\nupstream of a \"pull\" Socket.\r\nKeyword arguments are:\r\n\r\n\r\n SNAPLEN\r\n Unsigned integer. Maximum length of packets that can be\r\nreceived. Default is 2048 bytes.\r\n\r\n\r\n\r\n\r\n NODELAY\r\n Boolean. Applies to TCP sockets only. If set, disable the Nagle\r\nalgorithm. This means that segments are always sent as soon as\r\npossible, even if there is only a small amount of data. When not set,\r\ndata is buffered until there is a sufficient amount to send out,\r\nthereby avoiding the frequent sending of small packets, which results\r\nin poor utilization of the network. Default is true.\r\n\r\n\r\n\r\n\r\n CLIENT\r\n Boolean. If set, forces the socket to connect() (if SOCK_STREAM) to\r\nthe specified address/port (if AF_INET) or file handle (if AF_UNIX),\r\ninstead of bind()-ing and listen()-ing to it.\r\nDefault is false. However, if a Socket element has no output and\r\nCLIENT is unspecified, it is assumed to be a client socket. If a\r\nSocket element has no input and CLIENT is unspecified, it is assumed\r\nto be a server socket.\r\n\r\n\r\n\r\n\r\n SNDBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket send buffer. The default value is set by the wmem_default\r\nsysctl and the maximum allowed value is set by the wmem_max sysctl.\r\n\r\n\r\n\r\n\r\n RCVBUF\r\n Unsigned integer. Sets the maximum size in bytes of the underlying\r\nsocket receive buffer. The default value is set by the rmem_default\r\nsysctl and the maximum allowed value is set by the rmem_max sysctl.\r\n\r\n\r\n\r\n\r\n TIMESTAMP\r\n Boolean. If set, sets the timestamp field on received packets to the\r\ncurrent time. Default is true.\r\n\r\n\r\n\r\n\r\n ALLOW\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is accepted. If the address is not found, the DENY table will\r\nthen be checked (see below).\r\n\r\n\r\n\r\n\r\n DENY\r\n The name of an IPRouteTable element, like RadixIPLookup or\r\nDirectIPLookup. If set and the Socket element is a server, the Socket\r\nelement will lookup source IP addresses of clients in the specified\r\nIPRouteTable before accepting a connection (if SOCK_STREAM) or\r\ndatagram (if SOCK_DGRAM). If the address is found, the connection or\r\ndatagram is dropped, otherwise it is accepted. Note that the ALLOW\r\ntable, if specified, is checked first. Wildcard matches may be\r\nspecified with netmasks; for example, to deny all hosts, specify a\r\nroute to \"0.0.0.0/0\" in the DENY table.\r\n\r\n\r\n\r\n\r\n VERBOSE\r\n Boolean. When true, Socket will print messages whenever it accepts a\r\nnew connection or drops an old one. Default is false.\r\n\r\n\r\n\r\n\r\n PROPER\r\n Boolean. PlanetLab specific. If true and Click has been configured\r\n--with-proper, use Proper to bind a reserved port.\r\n\r\n\r\n\r\n\r\n HEADROOM\r\n Integer. Per-packet headroom. Defaults to 28.\r\n\r\n\r\n","bgColor":"undefined","clickInfo":"Socket(\"TCP\", IP, PORTNUMBER [, LOCALIP] [, LOCALPORTNUMBER] [, KEYWORDS])Socket(\"UDP\", IP, PORTNUMBER [, LOCALIP] [, LOCALPORTNUMBER] [, KEYWORDS])Socket(\"UNIX\", FILENAME [, LOCALFILENAME] [, KEYWORDS])Socket(\"UNIX_DGRAM\", FILENAME [, LOCALFILENAME] [, KEYWORDS])","elementclassText":"","width":40,"height":18,"rx":2,"ry":2,"id":null,"x":null,"y":null,"imgSrc":"api/GetBlockImgSrcSvg/Host_and_Socket_Communication/Socket/undefined","blockDefId":"Socket-1.0","ports":[{"name":"in0","portIndex":0,"role":"input","processing":"*","val":null,"path":"M 18 0 L 22 0 L 20 4 z","cx":20,"cy":2,"multiplicity":"*","schemeName":"Click"},{"name":"out0","portIndex":1,"role":"output","processing":"*","val":null,"path":"M 18 14 L 22 14 L 22 18 L 18 18 z","cx":20,"cy":16,"multiplicity":"*","schemeName":"Click"}]},"ports":[{"connCount":1,"cx":20,"cy":2,"id":"ns3_bk26_po0","multiplicity":"*","name":"in0","path":"M 18 0 L 22 0 L 20 4 z","portIndex":0,"position":"top","processing":"*","role":"input","val":null,"schemeName":"Click","highlighted":false},{"connCount":0,"cx":20,"cy":16,"id":"ns3_bk26_po1","multiplicity":"*","name":"out0","path":"M 18 14 L 22 14 L 22 18 L 18 18 z","portIndex":1,"position":"bottom","processing":"*","role":"output","val":null,"schemeName":"Click","highlighted":false}],"elementclassText":"","portsTemplate":[{"enable":true,"id":"ns3_bk26_po0","name":"in0","role":"input","processing":"*","multiplicity":"*"},{"enable":true,"id":"ns3_bk26_po1","name":"out0","role":"output","processing":"*","multiplicity":"*"}]}],"blkTotalCnt":27,"vpoList":[{"id":"ns3_vp0","name":"vlan327","ports":[{"connCount":2,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"right","role":"nsvport"}],"mac":"02:ed:d2:1f:08:98"},{"id":"ns3_vp1","name":"vlan309","ports":[{"connCount":2,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"left","role":"nsvport"}],"mac":"02:8d:4d:ae:b0:9b"},{"id":"ns3_vp2","name":"vlan332","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"left","role":"nsvport"}],"mac":"02:91:0a:f9:79:d0"}],"vpoTotalCnt":3,"lnkList":[{"id":"ns3_link0","sourceId":"ns3_bk0","targetId":"ns3_bk5","left":false,"right":true,"srcPortIdx":0,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link1","sourceId":"ns3_bk5","targetId":"ns3_bk7","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link2","sourceId":"ns3_bk7","targetId":"ns3_bk6","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link3","sourceId":"ns3_bk6","targetId":"ns3_bk15","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link4","sourceId":"ns3_bk15","targetId":"ns3_bk16","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link5","sourceId":"ns3_bk16","targetId":"ns3_bk19","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link11","sourceId":"ns3_bk1","targetId":"ns3_bk11","left":false,"right":true,"srcPortIdx":0,"dstPortIdx":1,"className":"link bblink"},{"id":"ns3_link12","sourceId":"ns3_bk5","targetId":"ns3_bk11","left":false,"right":true,"srcPortIdx":2,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link13","sourceId":"ns3_bk16","targetId":"ns3_bk8","left":false,"right":true,"srcPortIdx":2,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link14","sourceId":"ns3_bk8","targetId":"ns3_bk11","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link15","sourceId":"ns3_bk14","targetId":"ns3_bk11","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":2,"className":"link bblink"},{"id":"ns3_link16","sourceId":"ns3_bk11","targetId":"ns3_bk3","left":false,"right":true,"srcPortIdx":3,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link17","sourceId":"ns3_bk3","targetId":"ns3_bk2","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link18","sourceId":"ns3_bk11","targetId":"ns3_bk4","left":false,"right":true,"srcPortIdx":4,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link19","sourceId":"ns3_bk11","targetId":"ns3_bk18","left":false,"right":true,"srcPortIdx":5,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link20","sourceId":"ns3_bk18","targetId":"ns3_bk14","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link21","sourceId":"ns3_bk20","targetId":"ns3_bk9","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link22","sourceId":"ns3_bk9","targetId":"ns3_bk11","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link23","sourceId":"ns3_bk4","targetId":"ns3_bk21","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link32","sourceId":"ns3_bk19","targetId":"ns3_bk23","left":false,"right":true,"srcPortIdx":4,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link34","sourceId":"ns3_bk19","targetId":"ns3_bk24","left":false,"right":true,"srcPortIdx":5,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link36","sourceId":"ns3_bk19","targetId":"ns3_bk20","left":false,"right":true,"srcPortIdx":3,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link37","sourceId":"ns3_bk23","targetId":"ns3_bk25","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link38","sourceId":"ns3_bk24","targetId":"ns3_bk26","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bblink"},{"id":"ns3_link42","sourceId":"ns3_bk0","targetId":"ns3_vp0","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns3_link44","sourceId":"ns3_bk1","targetId":"ns3_vp1","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns3_link45","sourceId":"ns3_bk2","targetId":"ns3_vp0","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"},{"id":"ns3_link46","sourceId":"ns3_bk21","targetId":"ns3_vp1","left":false,"right":true,"srcPortIdx":1,"dstPortIdx":0,"className":"link bvlink"}],"lnkTotalCnt":47,"sliceName":"","hostname":""},{"id":"ns4","name":"PG:NS:PN2","blkList":[],"blkTotalCnt":0,"vpoList":[{"id":"ns4_vp0","name":"vlan309","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"right","role":"nsvport"}],"mac":"02:52:76:52:a6:c1"},{"id":"ns4_vp1","name":"vlan308","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"top","role":"nsvport"}],"mac":"02:91:2b:30:01:d7"}],"vpoTotalCnt":2,"lnkList":[],"lnkTotalCnt":0,"sliceName":"","hostname":""},{"id":"ns5","name":"PG:NS:PN3","blkList":[],"blkTotalCnt":0,"vpoList":[{"id":"ns5_vp0","name":"vlan308","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"bottom","role":"nsvport"}],"mac":"02:c2:37:a8:43:cc"},{"id":"ns5_vp1","name":"vlan332","ports":[{"connCount":0,"cx":0,"cy":0,"path":"M 4 0 L 8 0 L 6 4 z","position":"right","role":"nsvport"}],"mac":"02:b2:09:b5:25:63"}],"vpoTotalCnt":2,"lnkList":[],"lnkTotalCnt":0,"sliceName":"","hostname":""}],"vvList":[{"id":"vvlink0","sourceId":"ns0","targetId":"ns3","left":false,"right":true,"srcVportId":"ns0_vp0","tgtVportId":"ns3_vp0","className":"link vvlink"},{"id":"vvlink1","sourceId":"ns0","targetId":"ns1","left":false,"right":true,"srcVportId":"ns0_vp1","tgtVportId":"ns1_vp0","className":"link vvlink"},{"id":"vvlink2","sourceId":"ns2","targetId":"ns1","left":false,"right":true,"srcVportId":"ns2_vp0","tgtVportId":"ns1_vp1","className":"link vvlink"},{"id":"vvlink3","sourceId":"ns0","targetId":"ns2","left":false,"right":true,"srcVportId":"ns0_vp2","tgtVportId":"ns2_vp1","className":"link vvlink"},{"id":"vvlink4","sourceId":"ns5","targetId":"ns3","left":false,"right":true,"srcVportId":"ns5_vp1","tgtVportId":"ns3_vp2","className":"link vvlink"},{"id":"vvlink5","sourceId":"ns3","targetId":"ns4","left":false,"right":true,"srcVportId":"ns3_vp1","tgtVportId":"ns4_vp0","className":"link vvlink"},{"id":"vvlink6","sourceId":"ns4","targetId":"ns5","left":false,"right":true,"srcVportId":"ns4_vp1","tgtVportId":"ns5_vp0","className":"link vvlink"}]}